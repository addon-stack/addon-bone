import {getDefaultLocale} from "@browser/runtime";
import {getI18nMessage, getI18nUILanguage} from "@browser/i18n";

import AbstractLocale from "./AbstractLocale";

import {convertLocaleKey} from "@locale/utils";
import {isBrowser} from "@main/env";

import {Language, LanguageCodes, LocaleCustomKeyForLanguage, LocaleProvider, LocaleStructure} from "@typing/locale";
import {Browser} from "@typing/browser";

export interface LocaleNativeStructure extends LocaleStructure {
}

export default class NativeLocale extends AbstractLocale<LocaleNativeStructure> {
    private static instance?: LocaleProvider<LocaleNativeStructure>;

    public static getInstance<S extends LocaleStructure = LocaleNativeStructure>(): LocaleProvider<S> {
        return NativeLocale.instance ??= new NativeLocale();
    }

    public lang(): Language {
        let lang: Language | undefined;

        /**
         * The Opera browser does not support RTL languages,
         * and for Opera you need to directly indicate what kind of language it is.
         * interface language is always different
         */
        if (isBrowser(Browser.Opera)) {
            lang = getI18nMessage(LocaleCustomKeyForLanguage) as Language;

            if (LanguageCodes.has(lang)) {
                return lang;
            }
        }

        lang = getI18nUILanguage() as Language;

        if (!lang) {
            throw new Error("Locale Native: Unable to get UI language");
        }

        return this.languages().has(lang) ? lang : getDefaultLocale() as Language
    }


    public keys(): Set<keyof LocaleNativeStructure> {
        try {
            // @ts-expect-error: __ADNBN_LOCALE_KEYS__ is a virtual variable generated by the bundler `src/cli/plugins/locale/index.ts`
            return new Set<string>(__ADNBN_LOCALE_KEYS__);
        } catch (e) {
            console.error("Locale Native: Unable to get keys", e);

            return new Set<string>();
        }
    }

    public languages(): Set<Language> {
        try {
            // @ts-expect-error: __ADNBN_DEFINED_LOCALES__ is a virtual variable generated by the bundler `src/cli/plugins/locale/index.ts`
            return new Set<Language>(__ADNBN_DEFINED_LOCALES__)
        } catch (e) {
            console.error("Locale Native: Unable to get defined locales", e);

            return new Set<Language>();
        }
    }

    protected value(key: Extract<keyof LocaleNativeStructure, string>): string | undefined {
        const value = getI18nMessage(convertLocaleKey(key));

        if (!value || value.length === 0) {
            return undefined;
        }

        return value;
    }
}