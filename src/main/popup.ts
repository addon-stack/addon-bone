import {changeActionIcon} from "./icon"

import {setActionPopup} from "@browser/action";

import {PopupDefinition} from "@typing/popup";

type Tab = chrome.tabs.Tab;

export type PopupAlias = string;

export type PopupMap = Map<PopupAlias, string>;

export type PopupIcons = Map<PopupAlias, string>;

export const definePopup = (options: PopupDefinition): PopupDefinition => {
    return options;
}

export const getPopups = (): PopupMap => {
    const popups: PopupMap = new Map();

    try {
        // @ts-expect-error: __ADNBN_POPUP_ALIAS__ is a virtual variable generated by the bundler `src/cli/plugins/popup/index.ts`
        Object.entries<string>(__ADNBN_POPUP_ALIAS__).forEach(([key, value]) => {
            popups.set(key, value);
        });
    } catch (e) {
        console.error('Error getting popups:', e);
    }

    return popups;
};

export const getPopupIcons = (): PopupIcons => {
    const icons: PopupIcons = new Map();

    try {
        // @ts-expect-error: __ADNBN_POPUP_ICONS__ is a virtual variable generated by the bundler `src/cli/plugins/popup/index.ts`
        Object.entries<string>(__ADNBN_POPUP_ICONS__).forEach(([key, value]) => {
            icons.set(key, value);
        });
    } catch (e) {
        console.error('Error getting popup icons:', e);
    }

    return icons;
};

export const changePopup = async (alias: PopupAlias, tab?: number | Tab): Promise<void> => {
    const popup = getPopups().get(alias);

    if (!popup) {
        throw new Error(`Not found popup: "${alias}"`);
    }

    if (tab && typeof tab === "object") {
        tab = tab.id;
    }

    await setActionPopup(popup, tab);

    const icon = getPopupIcons().get(alias);

    if (icon) {
        await changeActionIcon(icon, tab);
    }
}