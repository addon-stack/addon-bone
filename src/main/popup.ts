import {changeActionIcon} from "./icon";
import {__t} from "./locale";

import {setActionPopup, setActionTitle} from "@adnbn/browser";

import {PopupDefinition} from "@typing/popup";
import {ManifestPopup} from "@typing/manifest";

type Tab = chrome.tabs.Tab;

export type PopupAlias = string;

export type PopupMap = Map<PopupAlias, ManifestPopup>;

export const definePopup = (options: PopupDefinition): PopupDefinition => {
    return options;
};

export const getPopups = (): PopupMap => {
    const popups: PopupMap = new Map();

    try {
        // @ts-expect-error: __ADNBN_POPUP_MAP__ is a virtual variable generated by the bundler `src/cli/plugins/popup/index.ts`
        Object.entries<ManifestPopup>(__ADNBN_POPUP_MAP__).forEach(([key, value]) => {
            popups.set(key, value);
        });
    } catch (e) {
        console.error("Failed getting popups: ", e);
    }

    return popups;
};

export const changePopup = async (alias: PopupAlias, tab?: number | Tab): Promise<void> => {
    const popup = getPopups().get(alias);

    if (!popup) {
        throw new Error(`Not found popup: "${alias}"`);
    }

    if (tab && typeof tab === "object") {
        tab = tab.id;
    }

    const {path, title, icon} = popup;

    if (!path) {
        throw new Error(`Not found popup path: "${alias}"`);
    }

    await setActionPopup(path, tab);

    if (title) {
        await setActionTitle(__t(title), tab);
    }

    if (icon) {
        await changeActionIcon(icon, tab);
    }
};
