import {ProxyRelay, type ProxyRelayOptions} from "@relay/providers";

import {DeepAsyncProxy} from "@typing/helpers";
import {TransportDictionary, TransportType} from "@typing/transport";
import {RelayDefinition, RelayMethod, RelayUnresolvedDefinition} from "@typing/relay";

export {RelayMethod} from "@typing/relay";

export type {RelayDefinition, RelayUnresolvedDefinition};

export const defineRelay = <T extends TransportType>(options: RelayDefinition<T>): RelayDefinition<T> => {
    return options;
};

type RelaysMap = Map<string, RelayMethod | undefined>;

const getRelays = (): RelaysMap => {
    const relays: RelaysMap = new Map();

    try {
        // @ts-expect-error: __ADNBN_RELAYS_METHODS__ is a virtual variable generated by the bundler `src/cli/plugins/content/index.ts`
        Object.entries<RelayMethod | undefined>(__ADNBN_RELAYS_METHODS__)
            .forEach(([key, value]) => relays.set(key, value));

    } catch (e) {
        console.error("Failed getting relays: ", e);
    }

    return relays;
};

export const getRelay = <N extends Extract<keyof TransportDictionary, string>>(
    name: N,
    options: ProxyRelayOptions
): DeepAsyncProxy<TransportDictionary[N]> => {
    const method = getRelays().get(name) || RelayMethod.Scripting;

    return new ProxyRelay(name, method, options).get();
};
