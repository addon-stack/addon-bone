import {ProxyRelay, type ProxyRelayParams} from "@relay/providers";

import {DeepAsyncProxy} from "@typing/helpers";
import {TransportDictionary, TransportType} from "@typing/transport";
import {RelayDefinition, RelayMethod, RelayOptions, RelayUnresolvedDefinition} from "@typing/relay";

export {RelayMethod};
export type {RelayDefinition, RelayUnresolvedDefinition};

export const defineRelay = <T extends TransportType>(options: RelayDefinition<T>): RelayDefinition<T> => {
    return options;
};

type RelayOptionsMap = Map<string, RelayOptions>;

const getRelayOptionsMap = (): RelayOptionsMap => {
    const relays: RelayOptionsMap = new Map();

    try {
        // @ts-expect-error: __ADNBN_RELAY_OPTIONS__ is a virtual variable generated by the bundler `src/cli/plugins/content/index.ts`
        Object.entries<RelayOptions>(__ADNBN_RELAY_OPTIONS__).forEach(([key, value]) => relays.set(key, value));
    } catch (e) {
        console.error("Failed getting relays: ", e);
    }

    return relays;
};

export const getRelay = <N extends Extract<keyof TransportDictionary, string>>(
    name: N,
    params: ProxyRelayParams
): DeepAsyncProxy<TransportDictionary[N]> => {
    const options = getRelayOptionsMap().get(name);

    if (!options) {
        throw new Error(`Failed to get relay "${name}"`);
    }

    return new ProxyRelay(name, options, params).get();
};
