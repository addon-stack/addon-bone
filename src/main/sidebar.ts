import {setSidebarPath, setSidebarTitle} from "@adnbn/browser";

import {__t} from "@locale/helpers";

import type {SidebarDefinition} from "@typing/sidebar";
import type {ManifestSidebar} from "@typing/manifest";

type Tab = chrome.tabs.Tab;

export type SidebarAlias = string;

export type SidebarMap = Map<SidebarAlias, ManifestSidebar>;

export const defineSidebar = (options: SidebarDefinition): SidebarDefinition => {
    return options;
};

export const getSidebars = (): SidebarMap => {
    const sidebars: SidebarMap = new Map();

    try {
        // @ts-expect-error: __ADNBN_SIDEBAR_MAP__ is a virtual variable generated by the bundler `src/cli/plugins/sidebar/index.ts`
        Object.entries<ManifestSidebar>(__ADNBN_SIDEBAR_MAP__).forEach(([key, value]) => {
            sidebars.set(key, value);
        });
    } catch (e) {
        console.error("Failed getting sidebars: ", e);
    }

    return sidebars;
};

export const changeSidebar = async (alias: SidebarAlias, tab?: number | Tab): Promise<void> => {
    const sidebar = getSidebars().get(alias);

    if (!sidebar) {
        throw new Error(`Not found sidebar: "${alias}"`);
    }

    if (tab && typeof tab === "object") {
        tab = tab.id;
    }

    const {path, title} = sidebar;

    if (!path) {
        throw new Error(`Not found sidebar path: "${alias}"`);
    }

    await setSidebarPath(path, tab);

    if (title) {
        await setSidebarTitle(__t(title), tab);
    }
};
