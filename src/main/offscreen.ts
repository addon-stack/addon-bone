import ProxyOffscreen from "@offscreen/providers/ProxyOffscreen";

import {type OffscreenDefinition, OffscreenReason, type OffscreenUnresolvedDefinition} from "@typing/offscreen";
import {TransportDictionary, TransportType} from "@typing/transport";
import {DeepAsyncProxy} from "@typing/helpers";

type OffscreenParameters = chrome.offscreen.CreateParameters;

export {OffscreenReason, OffscreenDefinition, OffscreenUnresolvedDefinition};

export type OffscreenAlias = string;

export type OffscreenMap = Map<OffscreenAlias, OffscreenParameters>;

export const defineOffscreen = <T extends TransportType>(options: OffscreenDefinition<T>): OffscreenDefinition<T> => {
    return options;
}

export const getOffscreens = (): OffscreenMap => {
    const offscreens: OffscreenMap = new Map();

    try {
        // @ts-expect-error: __ADNBN_OFFSCREEN_PARAMETERS__ is a virtual variable generated by the bundler `src/cli/plugins/offscreen/index.ts`
        Object.entries<OffscreenParameters>(__ADNBN_OFFSCREEN_PARAMETERS__).forEach(([key, value]) => {
            offscreens.set(key, value);
        });
    } catch (e) {
        console.error('Failed getting offscreens: ', e);
    }

    return offscreens;
}

export const getOffscreen = <
    N extends Extract<keyof TransportDictionary, string>
>(name: N): DeepAsyncProxy<TransportDictionary[N]> => {
    const parameters = getOffscreens().get(name);

    if (!parameters) {
        throw new Error(`Unable to get offscreen: ${name}`);
    }

    return new ProxyOffscreen(name, parameters).get();
}